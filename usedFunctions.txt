pygame.display.set_mode : This function will create a display Surface. Note that calling this function implicitly initializes pygame.display, if it was not initialized before. The size argument is a pair of numbers representing the width and height.

pygame.display.set_caption : If the display has a window title, this function will change the name on the window.

event.type : event type identifier.

pygame.QUIT : Is a constant representing the type of event, If the Event object is a quit event, then the pygame.quit() and sys.exit() functions are called. Your programs should always call pygame.quit() before they call sys.exit() to terminate the program. (https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_Languages/Book%3A_Making_Games_with_Python_and_Pygame_(Sweigart)/03%3A_Pygame_Basics/3.06%3A_The_QUIT_Event_and_pygame.quit()_Function)

is sent when the user clicks the window's "X" button, or when the system 'asks' for the process to quit. If ignored, it can still be killed by the system. It lets you save, before quitting. (https://stackoverflow.com/questions/10080715/pygame-event-event-type-pygame-quit-confusion/10166066)

pygame.quit() : Uninitialize all pygame modules that have previously been initialized.

pygame.image.load() : Load an image from a file source. You can pass either a filename, a Python file-like object, or a pathlib.Path. Use the convert_alpha() method after loading so that the image has per pixel transparency.

To position an object on the screen, we need to tell the blit() function where to put the image. In pygame we always pass positions as an (X,Y) coordinate. This represents the number of pixels to the right, and the number of pixels down to place the image. The top-left corner of a Surface is coordinate (0, 0).

blit() function : Pygame has a display Surface. This is basically an image that is visible on the screen, and the image is made up of pixels. The main way you change these pixels is by calling the blit() function. This copies the pixels from one image onto another.


pygame.display.update() : This function is like an optimized version of pygame.display.flip() for software displays. It allows only a portion of the screen to updated, instead of the entire area. If no argument is passed it updates the entire Surface area like pygame.display.flip().


pygame.transform.scale() : resize to new resolution given as (width, height). This is a fast scale operation that does not sample the results.

pygame.rect.update() : Sets the position and size of the rectangle, in place. See parameters for pygame.Rect()pygame object for storing rectangular coordinates for the parameters of this function.

CLOCK
tick() : update the clock. This method should be called once per frame. It will compute how many milliseconds have passed since the previous call. this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.

pygame.time.get_ticks() : Return the number of milliseconds since pygame.init() was called. Before pygame is initialized this will always be 0.
